r = 3
r
2 * 3
a = c(1,2,3,4)
a
length(a)
iris
library(caret)
iris
head(iris)
table(iris$Species)
trainIndex <- createDataPartition(iris$Species, p = .8,
list = FALSE)
trainIndex
nrow(trainIndex)
trainIndex
trainIndex
iris$Species
irisTrain <- iris[trainIndex, ]
irisTrain
nrow(irisTrain)
irisTest <- iris[-trainIndex, ]
nrow(irisTest)
fitControl <- trainControl(
method = "cv",
number = 10)
fitControl
head(irisTrain)
model.rf <- train(Species ~ ., data = irisTrain, method = "rf", trControl = fitControl)
model.rf <- train(Species ~ ., data = irisTrain, method = "rf", trControl = fitControl)
install.packages("e1071")
model.rf <- train(Species ~ ., data = irisTrain, method = "rf", trControl = fitControl)
model.rf
model.rf
summary(model.rf)
model.rf
model.rf <- train(Species ~ ., data = irisTrain, method = "gbm", trControl = fitControl)
model.rf
model.gbm <- train(Species ~ ., data = irisTrain, method = "gbm", trControl = fitControl)
model.rf <- train(Species ~ ., data = irisTrain, method = "rf", trControl = fitControl)
model.rf
predict(model.gbm, irisTest)
colnames(irisTrain)
pred <- predict(model.gbm, irisTest)
table(irisTest$Species, pred)
rf.pred <- predict(model.rf, irisTest)
rf.pred <- predict(model.rf, irisTest)
table(irisTest$Species, rf.pred)
rf.pred <- predict(model.rf, irisTest)
table(irisTest$Species, rf.pred)
pred <- predict(model.gbm, irisTest)
table(irisTest$Species, pred)
model.gbm
model.logit <- train(Species ~ ., data = irisTrain, method = "plr", trControl = fitControl)
model.logit <- train(Species ~ ., data = irisTrain, method = "plr", trControl = fitControl)
logit.pred <- predict(model.logit, irisTest)
logit.pred
table(irisTest$Species, logit.pred)
table(irisTest$Species, logit.pred)
logit.pred
model.logit
model.svmRadial <- train(Species ~ ., data = irisTrain, method = "svmRadial", trControl = fitControl)
svmRadial.pred <- predict(model.logit, model.svmRadial)
svmRadial.pred <- predict(model.svmRadial, model.svmRadial)
model.svmRadial <- train(Species ~ ., data = irisTrain, method = "svmRadial", trControl = fitControl)
svmRadial.pred <- predict(model.svmRadial, irisTest)
svmRadial.pred
model.svmRadial
model.pred <- predict(svmRadial.pred, irisTest)
setwd("~/Dropbox/udacity_challenge2_v2/output")
original = read.csv("original_output.csv")
head(original)
contrast <- read.csv("original_contrast_output.csv")
head(contrast)
data <- original
data <- cbind(original, contrast$steering_angle)
head(data)
colnames(data) <- c('frame_id', 'original_steering_angle', 'contrast_steering_angle')
head(data)
data.melt = melt(data, id=c("frame_id"))
library(ggplot2)
library(dplyr)
library(reshape2)
data.melt = melt(data, id=c("frame_id"))
ggplot(data.melt, aes(color = factor(variable), x = value)) + geom_density()
get_mse <- function(pred, real) {
mean((pred - real) ^ 2)
}
head(data)
get_mse(data$frame_id, data$original_steering_angle)
get_mse(data$frame_id, data$contrast_steering_angle)
original <- read.csv("original_output.csv")
contrast <- read.csv("original_contrast_output.csv")
data <- cbind(original, contrast$steering_angle)
head(data)
colnames(data) <- c('frame_id', 'original_steering_angle', 'contrast_steering_angle')
head(data)
data$avg_steering_angle <- (data$original_steering_angle + data$contrast_steering_angle) / 2
get_mse(data$frame_id, data$avg_steering_angle)
get_mse(data$frame_id, data$original_steering_angle)
get_mse(data$frame_id, data$contrast_steering_angle)
get_mse(data$frame_id, data$avg_steering_angle)
get_mse(data$frame_id, data$original_steering_angle)
get_mse(data$frame_id, data$contrast_steering_angle)
get_mse(data$frame_id, data$avg_steering_angle)
head(data)
select(data, frame_id > 0)
filter(data, frame_id > 0)
data.prositive <- filter(data, frame_id > 0)
get_mse(data.prositive$frame_id, data.prositive$original_steering_angle)
get_mse(data.prositive$frame_id, data.prositive$contrast_steering_angle)
get_mse(data.prositive$frame_id, data.prositive$avg_steering_angle)
data.positive <- filter(data, frame_id > 0)
get_mse(data.positive$frame_id, data.positive$original_steering_angle)
get_mse(data.positive$frame_id, data.positive$contrast_steering_angle)
get_mse(data.positive$frame_id, data.positive$avg_steering_angle)
data.negative <- filter(data, frame_id < 0)
get_mse(data.negative$frame_id, data.negative$original_steering_angle)
get_mse(data.negative$frame_id, data.negative$contrast_steering_angle)
get_mse(data.negative$frame_id, data.negative$avg_steering_angle)
original <- read.csv("original_output.csv")
contrast <- read.csv("original_contrast_output.csv")
data <- cbind(original, contrast$steering_angle)
colnames(data) <- c('frame_id', 'original_steering_angle', 'contrast_steering_angle')
data$avg_steering_angle <- data$original_steering_angle * 0.6 + data$contrast_steering_angle) * 0/4
data$avg_steering_angle <- data$original_steering_angle * 0.6 + data$contrast_steering_angle * 0/4
data.melt = melt(data, id=c("frame_id"))
ggplot(data.melt, aes(color = factor(variable), x = value)) + geom_density()
get_mse(data$frame_id, data$original_steering_angle)
get_mse(data$frame_id, data$contrast_steering_angle)
get_mse(data$frame_id, data$avg_steering_angle)
data.positive <- filter(data, frame_id > 0)
get_mse(data.positive$frame_id, data.positive$original_steering_angle)
get_mse(data.positive$frame_id, data.positive$contrast_steering_angle)
get_mse(data.positive$frame_id, data.positive$avg_steering_angle)
data.negative <- filter(data, frame_id < 0)
get_mse(data.negative$frame_id, data.negative$original_steering_angle)
get_mse(data.negative$frame_id, data.negative$contrast_steering_angle)
get_mse(data.negative$frame_id, data.negative$avg_steering_angle)
data$avg_steering_angle <- data$original_steering_angle * 0.6 + data$contrast_steering_angle * 0.4
original <- read.csv("original_output.csv")
contrast <- read.csv("original_contrast_output.csv")
data <- cbind(original, contrast$steering_angle)
colnames(data) <- c('frame_id', 'original_steering_angle', 'contrast_steering_angle')
data$avg_steering_angle <- data$original_steering_angle * 0.6 + data$contrast_steering_angle * 0.4
get_mse(data$frame_id, data$original_steering_angle)
get_mse(data$frame_id, data$contrast_steering_angle)
get_mse(data$frame_id, data$avg_steering_angle)
get_mse(data.positive$frame_id, data.positive$original_steering_angle)
get_mse(data.positive$frame_id, data.positive$contrast_steering_angle)
get_mse(data.positive$frame_id, data.positive$avg_steering_angle)
get_mse(data.negative$frame_id, data.negative$original_steering_angle)
get_mse(data.negative$frame_id, data.negative$contrast_steering_angle)
get_mse(data.negative$frame_id, data.negative$avg_steering_angle)
data$avg_steering_angle <- data$original_steering_angle * 0.4 + data$contrast_steering_angle * 0.6
head(data)
data.melt = melt(data, id=c("frame_id"))
ggplot(data.melt, aes(color = factor(variable), x = value)) + geom_density()
get_mse(data$frame_id, data$original_steering_angle)
get_mse(data$frame_id, data$contrast_steering_angle)
get_mse(data$frame_id, data$avg_steering_angle)
head(data)
data.positive <- filter(data, frame_id > 0)
get_mse(data.positive$frame_id, data.positive$original_steering_angle)
get_mse(data.positive$frame_id, data.positive$contrast_steering_angle)
get_mse(data.positive$frame_id, data.positive$avg_steering_angle)
data.negative <- filter(data, frame_id < 0)
get_mse(data.negative$frame_id, data.negative$original_steering_angle)
get_mse(data.negative$frame_id, data.negative$contrast_steering_angle)
get_mse(data.negative$frame_id, data.negative$avg_steering_angle)
