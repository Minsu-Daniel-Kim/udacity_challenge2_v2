r = 3
r
2 * 3
a = c(1,2,3,4)
a
length(a)
iris
library(caret)
iris
head(iris)
table(iris$Species)
trainIndex <- createDataPartition(iris$Species, p = .8,
list = FALSE)
trainIndex
nrow(trainIndex)
trainIndex
trainIndex
iris$Species
irisTrain <- iris[trainIndex, ]
irisTrain
nrow(irisTrain)
irisTest <- iris[-trainIndex, ]
nrow(irisTest)
fitControl <- trainControl(
method = "cv",
number = 10)
fitControl
head(irisTrain)
model.rf <- train(Species ~ ., data = irisTrain, method = "rf", trControl = fitControl)
model.rf <- train(Species ~ ., data = irisTrain, method = "rf", trControl = fitControl)
install.packages("e1071")
model.rf <- train(Species ~ ., data = irisTrain, method = "rf", trControl = fitControl)
model.rf
model.rf
summary(model.rf)
model.rf
model.rf <- train(Species ~ ., data = irisTrain, method = "gbm", trControl = fitControl)
model.rf
model.gbm <- train(Species ~ ., data = irisTrain, method = "gbm", trControl = fitControl)
model.rf <- train(Species ~ ., data = irisTrain, method = "rf", trControl = fitControl)
model.rf
predict(model.gbm, irisTest)
colnames(irisTrain)
pred <- predict(model.gbm, irisTest)
table(irisTest$Species, pred)
rf.pred <- predict(model.rf, irisTest)
rf.pred <- predict(model.rf, irisTest)
table(irisTest$Species, rf.pred)
rf.pred <- predict(model.rf, irisTest)
table(irisTest$Species, rf.pred)
pred <- predict(model.gbm, irisTest)
table(irisTest$Species, pred)
model.gbm
model.logit <- train(Species ~ ., data = irisTrain, method = "plr", trControl = fitControl)
model.logit <- train(Species ~ ., data = irisTrain, method = "plr", trControl = fitControl)
logit.pred <- predict(model.logit, irisTest)
logit.pred
table(irisTest$Species, logit.pred)
table(irisTest$Species, logit.pred)
logit.pred
model.logit
model.svmRadial <- train(Species ~ ., data = irisTrain, method = "svmRadial", trControl = fitControl)
svmRadial.pred <- predict(model.logit, model.svmRadial)
svmRadial.pred <- predict(model.svmRadial, model.svmRadial)
model.svmRadial <- train(Species ~ ., data = irisTrain, method = "svmRadial", trControl = fitControl)
svmRadial.pred <- predict(model.svmRadial, irisTest)
svmRadial.pred
model.svmRadial
model.pred <- predict(svmRadial.pred, irisTest)
setwd("~/Dropbox/udacity_challenge2_v2/output")
library(ggplot2)
library(dplyr)
library(reshape2)
original <- read.csv("original_output.csv")
contrast <- read.csv("original_contrast_output.csv")
data <- cbind(original, contrast$steering_angle)
colnames(data) <- c('frame_id', 'original_steering_angle', 'contrast_steering_angle')
setwd("~/Dropbox/udacity_challenge2_v2/output")
original <- read.csv("original_output.csv")
contrast <- read.csv("original_contrast_output.csv")
contrast
head(contrast)
data <- cbind(original, contrast$steering_angle)
colnames(data) <- c('frame_id', 'original_steering_angle', 'contrast_steering_angle')
head(data)
library(ggplot2)
library(dplyr)
library(reshape2)
arrange(data, frame_id)
ggplot(aes(x = 1:nrow(data), y = frame_id)) + geom_line()
arrange(data, frame_id) %>%
ggplot(aes(x = 1:nrow(data), y = frame_id)) + geom_line()
arrange(data, frame_id) %>%
ggplot() + geom_line(aes(x = 1:nrow(data), y = frame_id)))
arrange(data, frame_id) %>%
ggplot() + geom_line(aes(x = 1:nrow(data), y = frame_id))
arrange(data, frame_id) %>%
ggplot() + geom_line(aes(x = 1:nrow(data), y = frame_id), colour = 'red')
head(data)
arrange(data, frame_id) %>%
ggplot() + geom_line(aes(x = 1:nrow(data), y = frame_id), colour = 'red') +
geom_line(aes(x = 1:nrow(data), y = original_steering_angle), colour = 'blue')
arrange(data, frame_id) %>%
ggplot() + geom_line(aes(x = 1:nrow(data), y = frame_id), colour = 'blue') +
geom_line(aes(x = 1:nrow(data), y = original_steering_angle), colour = 'reb')
arrange(data, frame_id) %>%
ggplot() + geom_line(aes(x = 1:nrow(data), y = frame_id), colour = 'blue') +
geom_line(aes(x = 1:nrow(data), y = original_steering_angle), colour = 'red')
arrange(data, frame_id) %>%
ggplot() + geom_line(aes(x = 1:nrow(data), y = frame_id), colour = 'blue', size = 10)  +
geom_line(aes(x = 1:nrow(data), y = original_steering_angle), colour = 'red')
head(data)
arrange(data, frame_id) %>%
ggplot() + geom_line(aes(x = 1:nrow(data), y = frame_id), colour = 'blue', size = 10)  +
geom_line(aes(x = 1:nrow(data), y = original_steering_angle), colour = 'red', size = 7) +
geom_line(aes(x = 1:nrow(data), y = contrast_steering_angle), colour = 'yellow')
arrange(data, frame_id) %>%
ggplot() + geom_line(aes(x = 1:nrow(data), y = frame_id), colour = 'blue', size = 10)  +
geom_line(aes(x = 1:nrow(data), y = original_steering_angle), colour = 'red', size = 5) +
geom_line(aes(x = 1:nrow(data), y = contrast_steering_angle), colour = 'yellow')
ggplot() + geom_line(aes(x = 1:nrow(data), y = frame_id), colour = 'blue', size = 7)  +
geom_line(aes(x = 1:nrow(data), y = original_steering_angle), colour = 'red', size = 5) +
geom_line(aes(x = 1:nrow(data), y = contrast_steering_angle), colour = 'yellow')
arrange(data, frame_id) %>%
ggplot() + geom_line(aes(x = 1:nrow(data), y = frame_id), colour = 'blue', size = 7)  +
geom_line(aes(x = 1:nrow(data), y = original_steering_angle), colour = 'red', size = 5) +
geom_line(aes(x = 1:nrow(data), y = contrast_steering_angle), colour = 'yellow')
arrange(data, frame_id) %>%
ggplot() + geom_line(aes(x = 1:nrow(data), y = frame_id), colour = 'blue', size = 4)  +
geom_line(aes(x = 1:nrow(data), y = original_steering_angle), colour = 'red', size = 2) +
geom_line(aes(x = 1:nrow(data), y = contrast_steering_angle), colour = 'yellow')
nrow(data)
sign(c(1, -1, 1))
sign(c(1, -1, 3))
sign(c(1, -1, 4))
sign(c(1, -1, -2))
sign(data$frame_id)
sign(data$frame_id) == sign(data$original_steering_angle)
sum(sign(data$frame_id) == sign(data$original_steering_angle))
sum(sign(data$frame_id) == sign(data$original_steering_angle)) / nrow(data)
View(original)
arrange(data, frame_id) %>%
ggplot() +
geom_line(aes(x = 1:nrow(data), y = original_steering_angle), colour = 'red', size = 2)
arrange(data, frame_id) %>%
ggplot() +
geom_line(aes(x = 1:nrow(data), y = original_steering_angle), colour = 'red')
arrange(data, frame_id) %>%
ggplot() +
geom_line(aes(x = 1:nrow(data), y = contrast_steering_angle), colour = 'yellow')
arrange(data, frame_id) %>%
ggplot() +
geom_line(aes(x = 1:nrow(data), y = original_steering_angle), colour = 'red')
arrange(data, frame_id) %>%
ggplot() +
geom_line(aes(x = 1:nrow(data), y = contrast_steering_angle), colour = 'blue')
head(data)
data$avg_steering_angle = (data$original_steering_angle + data$contrast_steering_angle) / 2
arrange(data, frame_id) %>%
ggplot() +
geom_line(aes(x = 1:nrow(data), y = avg_steering_angle), colour = 'blue')
arrange(data, frame_id) %>%
ggplot() +
geom_line(aes(x = 1:nrow(data), y = original_steering_angle), colour = 'red')
arrange(data, frame_id) %>%
ggplot() +
geom_line(aes(x = 1:nrow(data), y = original_steering_angle), colour = 'red')
arrange(data, frame_id) %>%
ggplot() +
geom_line(aes(x = 1:nrow(data), y = avg_steering_angle), colour = 'blue')
arrange(data, frame_id) %>%
ggplot() +
geom_line(aes(x = 1:nrow(data), y = contrast_steering_angle), colour = 'blue')
sign(data$frame_id) == sign(data$original_steering_angle)
data$same_direction = sign(data$frame_id) == sign(data$original_steering_angle)
table(data$same_direction)
data$same_direction
filter(data, !direction)
filter(data, !same_direction)
sum(sign(data$frame_id) == sign(data$original_steering_angle)) / nrow(data)
sum(sign(data$frame_id) == sign(data$original_steering_angle)) / nrow(data)
data$same_direction = sign(data$frame_id) == sign(data$original_steering_angle)
data$same_direction
data$original_steering_angle[data$same_direction]
data$original_steering_angle[!data$same_direction]
data$original_steering_angle[!data$same_direction] = 0
arrange(data, frame_id) %>%
ggplot() + geom_line(aes(x = 1:nrow(data), y = frame_id), colour = 'blue', size = 4)  +
geom_line(aes(x = 1:nrow(data), y = original_steering_angle), colour = 'red', size = 2)
arrange(data, frame_id) %>%
ggplot() + geom_line(aes(x = 1:nrow(data), y = frame_id), colour = 'blue')  +
geom_line(aes(x = 1:nrow(data), y = original_steering_angle), colour = 'red')
original <- read.csv("original_output.csv")
contrast <- read.csv("original_contrast_output.csv")
data <- cbind(original, contrast$steering_angle)
colnames(data) <- c('frame_id', 'original_steering_angle', 'contrast_steering_angle')
head(data)
data$avg_steering_angle = (data$original_steering_angle + data$contrast_steering_angle) / 2
arrange(data, frame_id) %>%
ggplot() + geom_line(aes(x = 1:nrow(data), y = frame_id), colour = 'blue', size = 4)  +
geom_line(aes(x = 1:nrow(data), y = original_steering_angle), colour = 'red', size = 2) +
geom_line(aes(x = 1:nrow(data), y = contrast_steering_angle), colour = 'yellow')
arrange(data, frame_id) %>%
ggplot() +
geom_line(aes(x = 1:nrow(data), y = original_steering_angle), colour = 'red')
arrange(data, frame_id) %>%
ggplot() +
geom_line(aes(x = 1:nrow(data), y = contrast_steering_angle), colour = 'blue')
arrange(data, frame_id) %>%
ggplot() +
geom_line(aes(x = 1:nrow(data), y = avg_steering_angle), colour = 'blue')
sum(sign(data$frame_id) == sign(data$original_steering_angle)) / nrow(data)
# assign true/false to same direction
data$same_direction = sign(data$frame_id) == sign(data$original_steering_angle)
# correct incorrect steering to 0
data$original_steering_angle_corrected = data$original_steering_angle
data$original_steering_angle_corrected[!data$same_direction] = 0
arrange(data, frame_id) %>%
ggplot() + geom_line(aes(x = 1:nrow(data), y = frame_id), colour = 'blue')  +
geom_line(aes(x = 1:nrow(data), y = original_steering_angle), colour = 'red')
arrange(data, frame_id) %>%
ggplot() + geom_line(aes(x = 1:nrow(data), y = frame_id), colour = 'blue', size = 2)  +
geom_line(aes(x = 1:nrow(data), y = original_steering_angle), colour = 'red', size =1)
get_mse <- function(pred, real) {
mean((pred - real) ^ 2)
}
get_mse(data$frame_id, data$original_steering_angle)
get_mse(data$frame_id, data$original_steering_angle_corrected)
data$original_steering_angle_corrected2 = data$original_steering_angle
data$original_steering_angle_corrected[!data$same_direction] = data$original_steering_angle * -1
data$original_steering_angle_corrected = data$original_steering_angle
data$original_steering_angle_corrected2 = data$original_steering_angle
data$original_steering_angle_corrected[!data$same_direction] = 0
data$original_steering_angle_correctedw[!data$same_direction] = data$original_steering_angle * -1
data$original_steering_angle * -1
data$original_steering_angle_correctedw[!data$same_direction]
data$original_steering_angle_correctedw[!data$same_direction] = data$original_steering_angle_correctedw[!data$same_direction] * -1
get_mse(data$frame_id, data$original_steering_angle)
get_mse(data$frame_id, data$original_steering_angle_corrected)
get_mse(data$frame_id, data$original_steering_angle_corrected2)
get_mse(data$frame_id, data$original_steering_angle)
get_mse(data$frame_id, data$original_steering_angle_corrected)
get_mse(data$frame_id, data$original_steering_angle_corrected2)
data$original_steering_angle_corrected2 = data$original_steering_angle
data$original_steering_angle_corrected[!data$same_direction] = 0
data$original_steering_angle_corrected2[!data$same_direction] = data$original_steering_angle_correctedw[!data$same_direction] * -1
get_mse(data$frame_id, data$original_steering_angle)
get_mse(data$frame_id, data$original_steering_angle_corrected)
get_mse(data$frame_id, data$original_steering_angle_corrected2)
data$frame_id
data$frame_id
data$frame_id > 0
data$to_right <- data$frame_id > 0
table(data$to_right)
setwd("~/Dropbox/udacity_challenge2_v2/result")
library(ggplot2)
library(dplyr)
library(reshape2)
# import data
data = read.csv("total_center_angle.csv")
ggplot(data, aes(x = factor(frame_id), y = angle)) + geom_boxplot( )
ggplot(data, aes(x = angle)) + geom_density()
ggplot(data, aes(x = angle)) + geom_histogram(bins = 100)
original = read.csv("2nd_submission_daniel_kim_output.csv")
colnames(original) = c("frame_id", "original_steering_angle")
contrast = read.csv("2nd_submission_daniel_kim_contrast_output.csv")
colnames(contrast) = c("frame_id", "contrast_steering_angle")
data = left_join(original, contrast, c("frame_id" = "frame_id"))
ggplot(data.melt, aes(x = value, color =factor(variable))) + geom_histogram()
data.melt = melt(data, id=c("frame_id"))
ggplot(data.melt, aes(color = factor(variable), x = value)) + geom_density()
data = arrange(data, frame_id)
ggplot(data.melt, aes(x = value, color =factor(variable))) + geom_histogram()
ggplot(data = data.melt, aes(x = 1:nrow(data.melt), data$value)) + geom_line() + facet_grid(variable ~ .)
ggplot(data.melt, aes(x = value, fill =factor(variable))) + geom_histogram(position = "dodge")
ggplot(data = data)  + geom_line(aes(x = 1:nrow(data), data$original_steering_angle, color = 'red')) + geom_line(aes(x = 1:nrow(data), data$contrast_steering_angle, color = 'blue'))
ggplot(data = data)  + geom_line(aes(x = 1:nrow(data), data$original_steering_angle, color = 'red')) + geom_line(aes(x = 1:nrow(data), data$avg_steering_angle, color = 'blue'))
data = read.csv("total_center_angle.csv")
data$X = NULL
summary(data)
ggplot(data, aes(x = angle)) + geom_histogram(bins = 200)
nrow(data)
setwd("~/Dropbox/udacity_challenge2_v2/output")
library(ggplot2)
library(dplyr)
library(reshape2)
original <- read.csv("original_output.csv")
contrast <- read.csv("original_contrast_output.csv")
data <- cbind(original, contrast$steering_angle)
colnames(data) <- c('frame_id', 'original_steering_angle', 'contrast_steering_angle')
head(data)
data.melt = melt(data, id=c("frame_id"))
get_mse <- function(pred, real) {
mean((pred - real) ^ 2)
}
data$avg_steering_angle = (data$original_steering_angle + data$contrast_steering_angle) / 2
data$to_right <- data$frame_id > 0
data
data$frame_id
ggplot(data= data, aes(x = frame_id)) + geom_histogram()
ggplot(data= data, aes(x = frame_id)) + geom_histogram(bins = 200)
nrow(data)
get_corrected_value <- function(val) {
sd(val) * 0.25 + mean(val)
}
val = data$original_steering_angle
threshold = sd(val) * 0.25 + mean(val)
threshold
head(data)
get_corrected_value <- function(val) {
threshold = sd(val) * 0.25 + mean(val)
return(threshold)
}
get_corrected_value(data$oringal_steering_angle)
head(data)
get_corrected_value(data$original_steering_angle)
thred = get_corrected_value(data$original_steering_angle)
data$original_steering_angle[data$original_steering_angle < thred & data$original_steering_angle > thred * -1]
1800 / 500
1800 / 5000
get_corrected_value <- function(val) {
threshold = sd(val) * 0.2 + mean(val)
return(threshold)
}
thred = get_corrected_value(data$original_steering_angle)
data$original_steering_angle[data$original_steering_angle < thred & data$original_steering_angle > thred * -1]
1541 / 5000
get_corrected_value <- function(val) {
threshold = sd(val) * 0.15 + mean(val)
return(threshold)
}
data$original_steering_angle[data$original_steering_angle < thred & data$original_steering_angle > thred * -1]
thred = get_corrected_value(data$original_steering_angle)
data$original_steering_angle[data$original_steering_angle < thred & data$original_steering_angle > thred * -1]
1268 / 5000
get_corrected_value <- function(val) {
threshold = sd(val) * 0.11 + mean(val)
return(threshold)
}
thred = get_corrected_value(data$original_steering_angle)
data$original_steering_angle[data$original_steering_angle < thred & data$original_steering_angle > thred * -1]
1016 / 5000
data$original_steering_angle[data$original_steering_angle < thred & data$original_steering_angle > thred * -1]
data$original_steering_angle[data$original_steering_angle < thred && data$original_steering_angle > thred * -1]
data$original_steering_angle < thred & data$original_steering_angle > thred * -1
?mutate
data$original_steering_angle
data$original_steering_angle_corrected2 <- data$original_steering_angle
data$original_steering_angle < thred & data$original_steering_angle > thred * -1
data$original_steering_angle_corrected2[data$original_steering_angle < thred & data$original_steering_angle > thred * -1] = 0
data
nrow(data)
get_mse(data$frame_id, data$original_steering_angle)
get_mse(data$frame_id, data$original_steering_angle_corrected)
get_mse(data$frame_id, data$original_steering_angle_corrected2)
original <- read.csv("original_output.csv")
contrast <- read.csv("original_contrast_output.csv")
data <- cbind(original, contrast$steering_angle)
colnames(data) <- c('frame_id', 'original_steering_angle', 'contrast_steering_angle')
head(data)
data.melt = melt(data, id=c("frame_id"))
get_mse <- function(pred, real) {
mean((pred - real) ^ 2)
}
get_corrected_value <- function(val) {
threshold = sd(val) * 0.11 + mean(val)
return(threshold)
}
sum(sign(data$frame_id) == sign(data$original_steering_angle)) / nrow(data)
# assign true/false to same direction
data$same_direction = sign(data$frame_id) == sign(data$original_steering_angle)
data$original_steering_angle_corrected = data$original_steering_angle
data$original_steering_angle_corrected[!data$same_direction] = 0
thred = get_corrected_value(data$original_steering_angle)
data$original_steering_angle_corrected2 <- data$original_steering_angle
data$original_steering_angle_corrected2[data$original_steering_angle < thred & data$original_steering_angle > thred * -1] = 0
get_mse(data$frame_id, data$original_steering_angle)
get_mse(data$frame_id, data$original_steering_angle_corrected)
get_mse(data$frame_id, data$original_steering_angle_corrected2)
get_corrected_value <- function(val) {
threshold = sd(val) * 0.5 + mean(val)
return(threshold)
}
thred = get_corrected_value(data$original_steering_angle)
thred
data$original_steering_angle < thred & data$original_steering_angle > thred * -1
thred
get_corrected_value <- function(val) {
threshold = sd(val) * 0.2 + mean(val)
return(threshold)
}
thred = get_corrected_value(data$original_steering_angle)
thred
thred = get_corrected_value(data$original_steering_angle)
data$original_steering_angle_corrected2 <- data$original_steering_angle
data$original_steering_angle_corrected2[data$original_steering_angle < thred & data$original_steering_angle > thred * -1] = 0
get_mse(data$frame_id, data$original_steering_angle)
get_mse(data$frame_id, data$original_steering_angle_corrected)
get_mse(data$frame_id, data$original_steering_angle_corrected2)
get_corrected_value <- function(val) {
threshold = sd(val) * 0.1 + mean(val)
return(threshold)
}
thred = get_corrected_value(data$original_steering_angle)
thred
thred = get_corrected_value(data$original_steering_angle)
data$original_steering_angle_corrected2 <- data$original_steering_angle
data$original_steering_angle_corrected2[data$original_steering_angle < thred & data$original_steering_angle > thred * -1] = 0
get_mse(data$frame_id, data$original_steering_angle)
get_mse(data$frame_id, data$original_steering_angle_corrected)
get_mse(data$frame_id, data$original_steering_angle_corrected2)
get_corrected_value <- function(val) {
threshold = sd(val) * 0.05 + mean(val)
return(threshold)
}
thred = get_corrected_value(data$original_steering_angle)
data$original_steering_angle_corrected2 <- data$original_steering_angle
data$original_steering_angle_corrected2[data$original_steering_angle < thred & data$original_steering_angle > thred * -1] = 0
get_mse(data$frame_id, data$original_steering_angle)
get_mse(data$frame_id, data$original_steering_angle_corrected)
get_mse(data$frame_id, data$original_steering_angle_corrected2)
get_corrected_value <- function(val) {
threshold = sd(val) * 0.02 + mean(val)
return(threshold)
}
thred = get_corrected_value(data$original_steering_angle)
data$original_steering_angle_corrected2 <- data$original_steering_angle
data$original_steering_angle_corrected2[data$original_steering_angle < thred & data$original_steering_angle > thred * -1] = 0
get_mse(data$frame_id, data$original_steering_angle)
get_mse(data$frame_id, data$original_steering_angle_corrected)
get_mse(data$frame_id, data$original_steering_angle_corrected2)
get_corrected_value <- function(val) {
threshold = sd(val) * 0.01 + mean(val)
return(threshold)
}
thred = get_corrected_value(data$original_steering_angle)
data$original_steering_angle_corrected2 <- data$original_steering_angle
data$original_steering_angle_corrected2[data$original_steering_angle < thred & data$original_steering_angle > thred * -1] = 0
get_mse(data$frame_id, data$original_steering_angle)
get_mse(data$frame_id, data$original_steering_angle_corrected)
get_mse(data$frame_id, data$original_steering_angle_corrected2)
setwd("~/Dropbox/udacity_challenge2_v2/result")
data = read.csv("total_center_angle.csv")
nrow(data)
data$X = NULL
nrow(data)
